From fe9167812f240ce5af16817c39ce74752b58a3bc Mon Sep 17 00:00:00 2001
From: Jakob Olsson <jakob.olsson@iopsys.eu>
Date: Wed, 26 Jun 2019 16:37:31 +0200
Subject: [PATCH 2/3] add uci granular acl support

this patch adds uci filter granularity to rpcds uci interface.

Signed-off-by: Jakob Olsson <jakob.olsson@iopsys.eu>
---
 CMakeLists.txt              |   2 +-
 include/rpcd/session.h      |   3 +
 include/rpcd/uci_granular.h |  81 ++++++++
 session.c                   |  39 +++-
 uci.c                       | 204 ++++++++++++++++++-
 uci_granular.c              | 385 ++++++++++++++++++++++++++++++++++++
 6 files changed, 703 insertions(+), 11 deletions(-)
 create mode 100644 include/rpcd/uci_granular.h
 create mode 100644 uci_granular.c

Index: rpcd-2019-06-05-89bfaa42/CMakeLists.txt
===================================================================
--- rpcd-2019-06-05-89bfaa42.orig/CMakeLists.txt
+++ rpcd-2019-06-05-89bfaa42/CMakeLists.txt
@@ -38,7 +38,7 @@ INCLUDE_DIRECTORIES(${ubus_include_dir})
 FIND_PATH(ubox_include_dir libubox/blobmsg_json.h)
 INCLUDE_DIRECTORIES(${ubox_include_dir})
 
-ADD_EXECUTABLE(rpcd main.c exec.c session.c uci.c plugin.c login_guard.c)
+ADD_EXECUTABLE(rpcd main.c exec.c session.c uci.c plugin.c login_guard.c uci_granular.c)
 TARGET_LINK_LIBRARIES(rpcd ${ubox} ${ubus} ${uci} ${blobmsg_json} ${json} ${crypt} dl)
 
 SET(PLUGINS "")
Index: rpcd-2019-06-05-89bfaa42/include/rpcd/session.h
===================================================================
--- rpcd-2019-06-05-89bfaa42.orig/include/rpcd/session.h
+++ rpcd-2019-06-05-89bfaa42/include/rpcd/session.h
@@ -45,6 +45,7 @@ struct rpc_session {
 	struct uloop_timeout t;
 	struct avl_tree data;
 	struct avl_tree acls;
+	struct avl_tree granular_configs;
 
 	int timeout;
 };
@@ -83,4 +84,6 @@ void rpc_session_destroy_cb(struct rpc_s
 void rpc_session_freeze(void);
 void rpc_session_thaw(void);
 
+const char *rpc_session_get_username(struct blob_attr *sid);
+struct rpc_session *rpc_session_get(const char *id);
 #endif
Index: rpcd-2019-06-05-89bfaa42/include/rpcd/uci_granular.h
===================================================================
--- /dev/null
+++ rpcd-2019-06-05-89bfaa42/include/rpcd/uci_granular.h
@@ -0,0 +1,81 @@
+/*
+ * granular uci access control
+ *
+ * Copyright (C) 2019 IOPSYS
+ *
+ * Author: Jakob Olsson <jakob.olsson@iopsys.eu>
+ * Author: Matija Amidzic <matija.amidzic@sartura.hr>
+ *
+ * Permission to use, copy, modify, and/or distribute this software for any
+ * purpose with or without fee is hereby granted, provided that the above
+ * copyright notice and this permission notice appear in all copies.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
+ * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
+ * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
+ * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
+ * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
+ * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
+ * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
+ */
+
+#include <libubox/avl.h>
+#include <libubox/blobmsg_json.h>
+
+/* maximum number of options by which to match the section (with uci lookup) */
+#define GRANULAR_MAX_MATCH_OPTIONS		8
+/* maximum size of list of allowed options */
+#define GRANULAR_MAX_ALLOWED_OPTIONS		16
+/* maximum number of match definitions per config */
+#define GRANULAR_MAX_MATCH_DEFINITIONS		8
+#define GRANULAR_MAX_STRING_LENGTH		64
+/* maximum number of matched definitions to parse when giving access */
+#define GRANULAR_MAX_MATCHED_DEFINITIONS	32
+
+struct uci_granular_query_s {
+    const char *config_name;
+    const char *username;
+    const char *section_name;
+    const char *section_type;
+};
+
+/* high level of access has higher index */
+enum option_access {
+	RPC_OA_NONE,
+	RPC_OA_OPTION,
+	RPC_OA_SECTION,
+	RPC_OA_FULL,
+};
+
+enum config_access {
+	RPC_CA_ALLOWED,
+	RPC_CA_RESTRICTED,
+};
+
+struct match_option_s {
+	char name[GRANULAR_MAX_STRING_LENGTH];
+	char value[GRANULAR_MAX_STRING_LENGTH];
+};
+
+struct match_definition_s {
+	char match_section_type[GRANULAR_MAX_STRING_LENGTH];
+	char match_section_name[GRANULAR_MAX_STRING_LENGTH];
+
+	struct match_option_s match_options[GRANULAR_MAX_MATCH_OPTIONS];
+	int match_options_count;
+
+	char **allowed_options;
+	int allowed_options_count;
+};
+
+struct uci_granular_ctx_s {
+	struct match_definition_s *match_definitions[GRANULAR_MAX_MATCHED_DEFINITIONS];
+	int match_definitions_count;
+
+	enum config_access state;
+};
+
+int rpc_uci_granular_init();
+int rpc_uci_granular_setup(struct rpc_session *ses, struct blob_attr *acl_top, const char *username);
+void rpc_uci_granular_get_allowed(struct rpc_session *ses, struct uci_granular_query_s *query, struct uci_granular_ctx_s *granular_ctx);
+void uci_granular_exit(struct rpc_session *ses);
Index: rpcd-2019-06-05-89bfaa42/session.c
===================================================================
--- rpcd-2019-06-05-89bfaa42.orig/session.c
+++ rpcd-2019-06-05-89bfaa42/session.c
@@ -27,6 +27,7 @@
 #include <glob.h>
 #include <uci.h>
 #include <limits.h>
+#include <syslog.h>
 
 #ifdef HAVE_SHADOW
 #include <shadow.h>
@@ -34,6 +35,7 @@
 
 #include <rpcd/session.h>
 #include <rpcd/login_guard.h>
+#include <rpcd/uci_granular.h>
 
 static struct avl_tree sessions;
 static struct blob_buf buf;
@@ -280,6 +282,8 @@ rpc_session_destroy(struct rpc_session *
 	avl_remove_all_elements(&ses->data, data, avl, ndata)
 		free(data);
 
+	uci_granular_exit(ses);
+
 	avl_delete(&sessions, &ses->avl);
 	free(ses);
 }
@@ -338,7 +342,7 @@ rpc_session_create(int timeout)
 	return ses;
 }
 
-static struct rpc_session *
+struct rpc_session *
 rpc_session_get(const char *id)
 {
 	struct rpc_session *ses;
@@ -1023,6 +1027,8 @@ rpc_login_setup_acl_file(struct rpc_sess
 
 	/* Iterate access groups in toplevel object */
 	blob_for_each_attr(acl_group, acl.head, rem) {
+		const char *username = blobmsg_name(acl_group);
+
 		/* Iterate permission objects in each access group object */
 		blobmsg_for_each_attr(acl_perm, acl_group, rem2) {
 			if (blobmsg_type(acl_perm) != BLOBMSG_TYPE_TABLE)
@@ -1044,7 +1050,16 @@ rpc_login_setup_acl_file(struct rpc_sess
 			/* Iterate scope objects within the permission object */
 			blobmsg_for_each_attr(acl_scope, acl_perm, rem3) {
 				/* Setup the scopes of the access group */
-				rpc_login_setup_acl_scope(ses, acl_perm, acl_scope);
+				if (strcmp(blobmsg_name(acl_scope), "uci_granular") == 0) {
+					if (!username) {
+						continue;
+					};
+
+					rpc_uci_granular_setup(ses, acl_scope, username);
+					continue;
+				} else {
+					rpc_login_setup_acl_scope(ses, acl_perm, acl_scope);
+				}
 
 				/*
 				 * Add the access group itself as object to the "access-group"
@@ -1169,6 +1184,7 @@ rpc_handle_login(struct ubus_context *ct
 		goto out;
 	}
 
+	rpc_uci_granular_init(ses);
 	rpc_login_setup_acls(ses, login);
 
 	rpc_session_set(ses, tb[RPC_L_USERNAME]);
@@ -1440,3 +1456,22 @@ void rpc_session_thaw(void)
 
 	uci_free_context(uci);
 }
+
+const char *rpc_session_get_username(struct blob_attr *sid)
+{
+	struct rpc_session *ses;
+	struct rpc_session_data *data;
+
+	if (!sid)
+		return NULL;
+
+	ses = rpc_session_get(blobmsg_get_string(sid));
+	if (!ses)
+		return "";
+
+	data = avl_find_element(&ses->data, "username", data, avl);
+	if (!data)
+		return "";
+
+	return blobmsg_get_string(data->attr);
+}
Index: rpcd-2019-06-05-89bfaa42/uci.c
===================================================================
--- rpcd-2019-06-05-89bfaa42.orig/uci.c
+++ rpcd-2019-06-05-89bfaa42/uci.c
@@ -25,13 +25,15 @@
 #include <rpcd/uci.h>
 #include <rpcd/exec.h>
 #include <rpcd/session.h>
+#include <rpcd/uci_granular.h>
+#include <syslog.h>
 
 static struct blob_buf buf;
 static struct uci_context *cursor;
 static struct uloop_timeout apply_timer;
 static struct ubus_context *apply_ctx;
-
 char apply_sid[RPC_SID_LEN + 1];
+static struct uci_granular_ctx_s granular_ctx;
 
 enum {
 	RPC_G_CONFIG,
@@ -498,6 +500,68 @@ rpc_uci_match_section(struct uci_section
 	return (empty || match);
 }
 
+static void
+rpc_uci_load_granular(const char *username, const char *config_name, const char *section_name, const char *section_type, const char *sid)
+{
+		struct uci_granular_query_s granular_query = {0};
+		struct rpc_session *ses;
+
+		if (!sid || (ses = rpc_session_get(sid)) == NULL) {
+			granular_ctx.state = RPC_CA_ALLOWED;
+			memset(granular_ctx.match_definitions, 0, sizeof(granular_ctx.match_definitions));
+			granular_ctx.match_definitions_count = -1;
+			return;
+		}
+
+		granular_query.config_name = config_name;
+		if (username == NULL || strcmp(username, "") == 0)
+			granular_query.username = "unauthenticated";
+		else
+			granular_query.username = username;
+		if (section_name != NULL)
+			granular_query.section_name = section_name;
+		if (section_type != NULL)
+			granular_query.section_type = section_type;
+
+		rpc_uci_granular_get_allowed(ses, &granular_query, &granular_ctx);
+}
+
+static bool
+rpc_uci_find_granular_access(const char *option)
+{
+	int i;
+
+	for (i = 0; i < granular_ctx.match_definitions_count; i++) {
+		struct match_definition_s *match_definition = granular_ctx.match_definitions[i];
+		int j;
+
+		if (match_definition->allowed_options_count == 0)
+			return true;
+
+		for (j = 0; j < match_definition->allowed_options_count; j++) {
+			if (!strncmp(match_definition->allowed_options[j], option, strlen(option) + 1))
+				return true;
+		}
+	}
+
+	return false;
+}
+
+static int
+rpc_uci_check_granular_is_allowed(const char *option)
+{
+	int allowed = RPC_OA_NONE;
+
+	if (granular_ctx.state == RPC_CA_ALLOWED)
+		allowed = RPC_OA_FULL;
+	else if (granular_ctx.match_definitions_count > 0 && rpc_uci_find_granular_access("*"))
+		allowed = RPC_OA_SECTION;
+	else if (rpc_uci_find_granular_access(option))
+		allowed = RPC_OA_OPTION;
+
+	return allowed;
+}
+
 /*
  * Dump the given uci_option value into the global blobmsg buffer and use
  * given "name" as key.
@@ -511,6 +575,11 @@ rpc_uci_dump_option(struct uci_option *o
 {
 	void *c;
 	struct uci_element *e;
+	int allowed;
+
+	allowed = rpc_uci_check_granular_is_allowed(o->e.name);
+	if(!allowed)
+		return;
 
 	switch (o->type)
 	{
@@ -549,6 +618,9 @@ rpc_uci_dump_section(struct uci_section
 
 	c = blobmsg_open_table(&buf, name);
 
+	if (granular_ctx.state == RPC_CA_RESTRICTED && granular_ctx.match_definitions_count == 0)
+		goto out;
+
 	blobmsg_add_u8(&buf, ".anonymous", s->anonymous);
 	blobmsg_add_string(&buf, ".type", s->type);
 	blobmsg_add_string(&buf, ".name", s->e.name);
@@ -562,6 +634,7 @@ rpc_uci_dump_section(struct uci_section
 		rpc_uci_dump_option(o, o->e.name);
 	}
 
+out:
 	blobmsg_close_table(&buf, c);
 }
 
@@ -575,7 +648,8 @@ rpc_uci_dump_section(struct uci_section
  */
 static void
 rpc_uci_dump_package(struct uci_package *p, const char *name,
-                     struct blob_attr *type, struct blob_attr *matches)
+                     struct blob_attr *type, struct blob_attr *matches,
+		     const char *username, const char *sid)
 {
 	void *c;
 	struct uci_element *e;
@@ -590,12 +664,38 @@ rpc_uci_dump_package(struct uci_package
 		if (!rpc_uci_match_section(uci_to_section(e), type, matches))
 			continue;
 
+		struct uci_section *s = uci_to_section(e);
+		if (!s)
+			continue;
+
+		rpc_uci_load_granular(username, p->e.name, e->name, s->type, sid);
+
+		if (granular_ctx.state == RPC_CA_RESTRICTED &&
+				granular_ctx.match_definitions_count == 0)
+			continue;
 		rpc_uci_dump_section(uci_to_section(e), e->name, i);
 	}
 
 	blobmsg_close_table(&buf, c);
 }
 
+static char *rpc_uci_name_to_type(struct uci_package *p, const char *name)
+{
+	struct uci_element *e;
+
+	if (!name)
+		return NULL;
+
+	uci_foreach_element(&p->sections, e) {
+		struct uci_section *s = uci_to_section(e);
+
+		if (strncmp(e->name, name, 32) == 0) {
+			return s->type;
+		}
+	}
+
+	return NULL;
+}
 
 static int
 rpc_uci_getcommon(struct ubus_context *ctx, struct ubus_request_data *req,
@@ -604,6 +704,8 @@ rpc_uci_getcommon(struct ubus_context *c
 	struct blob_attr *tb[__RPC_G_MAX];
 	struct uci_package *p = NULL;
 	struct uci_ptr ptr = { 0 };
+	const char *username;
+	const char *sid;
 
 	blobmsg_parse(rpc_uci_get_policy, __RPC_G_MAX, tb,
 	              blob_data(msg), blob_len(msg));
@@ -622,6 +724,17 @@ rpc_uci_getcommon(struct ubus_context *c
 	if (uci_load(cursor, ptr.package, &p))
 		return rpc_uci_status();
 
+	username = rpc_session_get_username(tb[RPC_G_SESSION]);
+
+	sid = tb[RPC_G_SESSION] ? blobmsg_data(tb[RPC_G_SESSION]) : NULL;
+	if (tb[RPC_G_CONFIG] && (tb[RPC_G_SECTION] || tb[RPC_G_TYPE]))
+	{
+		const char *config = blobmsg_data(tb[RPC_G_CONFIG]);
+		const char *section_name = tb[RPC_G_SECTION] ? blobmsg_data(tb[RPC_G_SECTION]) : NULL;
+		const char *section_type = tb[RPC_G_TYPE] ? blobmsg_data(tb[RPC_G_TYPE]) : rpc_uci_name_to_type(p, section_name);
+		rpc_uci_load_granular(username, config, section_name, section_type, sid);
+	}
+
 	if (tb[RPC_G_SECTION])
 	{
 		ptr.section = blobmsg_data(tb[RPC_G_SECTION]);
@@ -638,7 +751,8 @@ rpc_uci_getcommon(struct ubus_context *c
 	switch (ptr.last->type)
 	{
 	case UCI_TYPE_PACKAGE:
-		rpc_uci_dump_package(ptr.p, "values", tb[RPC_G_TYPE], tb[RPC_G_MATCH]);
+		rpc_uci_dump_package(ptr.p, "values", tb[RPC_G_TYPE],
+				tb[RPC_G_MATCH], username, sid);
 		break;
 
 	case UCI_TYPE_SECTION:
@@ -648,7 +762,6 @@ rpc_uci_getcommon(struct ubus_context *c
 	case UCI_TYPE_OPTION:
 		rpc_uci_dump_option(ptr.o, "value");
 		break;
-
 	default:
 		break;
 	}
@@ -657,6 +770,7 @@ rpc_uci_getcommon(struct ubus_context *c
 
 out:
 	uci_unload(cursor, p);
+	granular_ctx.match_definitions_count = -1;
 
 	return rpc_uci_status();
 }
@@ -687,7 +801,7 @@ rpc_uci_add(struct ubus_context *ctx, st
 	struct uci_package *p = NULL;
 	struct uci_section *s;
 	struct uci_ptr ptr = { 0 };
-	int rem, rem2, err = 0;
+	int rem, rem2, err = 0, allowed;
 
 	blobmsg_parse(rpc_uci_add_policy, __RPC_A_MAX, tb,
 	              blob_data(msg), blob_len(msg));
@@ -730,6 +844,22 @@ rpc_uci_add(struct ubus_context *ctx, st
 		ptr.section = s->e.name;
 	}
 
+	/* check granular ACL */
+	if (tb[RPC_A_CONFIG] && (tb[RPC_A_TYPE] || tb[RPC_A_NAME]))
+	{
+		const char *username = rpc_session_get_username(tb[RPC_A_SESSION]);
+		const char *config = blobmsg_data(tb[RPC_A_CONFIG]);
+		const char *sid = tb[RPC_A_SESSION] ? blobmsg_data(tb[RPC_A_SESSION]) : NULL;
+		const char *section_name = tb[RPC_A_NAME] ? blobmsg_data(tb[RPC_A_NAME]) : NULL;
+		const char *section_type = tb[RPC_A_TYPE] ? blobmsg_data(tb[RPC_A_TYPE]) : rpc_uci_name_to_type(p, section_name);
+		rpc_uci_load_granular(username, config, section_name, section_type, sid);
+	}
+
+	/* send dummy argument, will get RPC_OA_SECTION or above if full access */
+	allowed = rpc_uci_check_granular_is_allowed("");
+	if (allowed < RPC_OA_SECTION)
+		goto out;
+
 	if (tb[RPC_A_VALUES])
 	{
 		blobmsg_for_each_attr(cur, tb[RPC_A_VALUES], rem)
@@ -790,12 +920,13 @@ rpc_uci_add(struct ubus_context *ctx, st
 	if (!err)
 	{
 		uci_save(cursor, p);
-
 		blob_buf_init(&buf, 0);
 		blobmsg_add_string(&buf, "section", ptr.section);
 		ubus_send_reply(ctx, req, buf.head);
 	}
 
+	granular_ctx.match_definitions_count = -1;
+
 out:
 	uci_unload(cursor, p);
 
@@ -815,7 +946,7 @@ static int
 rpc_uci_merge_set(struct blob_attr *opt, struct uci_ptr *ptr)
 {
 	struct blob_attr *cur;
-	int rem, rv;
+	int rem, rv, allowed;
 
 	ptr->o = NULL;
 	ptr->option = blobmsg_name(opt);
@@ -827,6 +958,10 @@ rpc_uci_merge_set(struct blob_attr *opt,
 	if (rpc_uci_lookup(ptr) || !ptr->s)
 		return UBUS_STATUS_NOT_FOUND;
 
+	allowed = rpc_uci_check_granular_is_allowed(blobmsg_name(opt));
+	if (!allowed)
+		return UBUS_STATUS_OK;
+
 	if (blobmsg_type(opt) == BLOBMSG_TYPE_ARRAY)
 	{
 		if (ptr->o)
@@ -877,6 +1012,7 @@ rpc_uci_set(struct ubus_context *ctx, st
 	struct uci_element *e;
 	struct uci_ptr ptr = { 0 };
 	int rem, rv, err = 0;
+	const char *username;
 
 	blobmsg_parse(rpc_uci_set_policy, __RPC_S_MAX, tb,
 	              blob_data(msg), blob_len(msg));
@@ -897,6 +1033,17 @@ rpc_uci_set(struct ubus_context *ctx, st
 	if (uci_load(cursor, ptr.package, &p))
 		return rpc_uci_status();
 
+	username = rpc_session_get_username(tb[RPC_S_SESSION]);
+
+	if (tb[RPC_S_CONFIG] && (tb[RPC_S_SECTION] || tb[RPC_S_TYPE]))
+	{
+		const char *config = blobmsg_data(tb[RPC_S_CONFIG]);
+		const char *sid = tb[RPC_S_SESSION] ? blobmsg_data(tb[RPC_S_SESSION]) : NULL;
+		const char *section_name = tb[RPC_S_SECTION] ? blobmsg_data(tb[RPC_S_SECTION]) : NULL;
+		const char *section_type = tb[RPC_S_TYPE] ? blobmsg_data(tb[RPC_S_TYPE]) : rpc_uci_name_to_type(p, section_name);
+		rpc_uci_load_granular(username, config, section_name, section_type, sid);
+	}
+
 	if (tb[RPC_S_SECTION])
 	{
 		ptr.section = blobmsg_data(tb[RPC_S_SECTION]);
@@ -935,6 +1082,8 @@ rpc_uci_set(struct ubus_context *ctx, st
 	if (!err)
 		uci_save(cursor, p);
 
+	granular_ctx.match_definitions_count = -1;
+
 	uci_unload(cursor, p);
 
 	return err ? err : rpc_uci_status();
@@ -950,11 +1099,18 @@ static int
 rpc_uci_merge_delete(struct blob_attr *opt, struct uci_ptr *ptr)
 {
 	struct blob_attr *cur;
-	int rem, rv;
+	int rem, rv, allowed;
 
 	if (rpc_uci_lookup(ptr) || !ptr->s)
 		return UBUS_STATUS_NOT_FOUND;
 
+	/* send dummy option, will return RPC_OA_SECTION or higher if we are allowed
+	    to delete */
+	allowed = rpc_uci_check_granular_is_allowed("");
+	if (allowed < RPC_OA_SECTION) {
+		return UBUS_STATUS_OK;
+	}
+
 	if (!opt)
 	{
 		ptr->o = NULL;
@@ -1008,6 +1164,7 @@ rpc_uci_delete(struct ubus_context *ctx,
 	struct uci_package *p = NULL;
 	struct uci_element *e, *tmp;
 	struct uci_ptr ptr = { 0 };
+	const char *username;
 	int err = 0;
 
 	blobmsg_parse(rpc_uci_delete_policy, __RPC_D_MAX, tb,
@@ -1033,6 +1190,17 @@ rpc_uci_delete(struct ubus_context *ctx,
 	if (uci_load(cursor, ptr.package, &p))
 		return rpc_uci_status();
 
+	username = rpc_session_get_username(tb[RPC_D_SESSION]);
+
+	if (tb[RPC_D_CONFIG] && (tb[RPC_D_SECTION] || tb[RPC_D_TYPE]))
+	{
+		const char *config = blobmsg_data(tb[RPC_D_CONFIG]);
+		const char *sid = tb[RPC_D_SESSION] ? blobmsg_data(tb[RPC_D_SESSION]) : NULL;
+		const char *section_name = tb[RPC_D_SECTION] ? blobmsg_data(tb[RPC_D_SECTION]) : NULL;
+		const char *section_type = tb[RPC_D_TYPE] ? blobmsg_data(tb[RPC_D_TYPE]) : rpc_uci_name_to_type(p, section_name);
+		rpc_uci_load_granular(username, config, section_name, section_type, sid);
+	}
+
 	if (tb[RPC_D_SECTION])
 	{
 		ptr.section = blobmsg_data(tb[RPC_D_SECTION]);
@@ -1066,6 +1234,8 @@ rpc_uci_delete(struct ubus_context *ctx,
 	if (!err)
 		uci_save(cursor, p);
 
+	granular_ctx.match_definitions_count = -1;
+
 	uci_unload(cursor, p);
 
 	return err ? err : rpc_uci_status();
@@ -1079,6 +1249,7 @@ rpc_uci_rename(struct ubus_context *ctx,
 	struct blob_attr *tb[__RPC_R_MAX];
 	struct uci_package *p = NULL;
 	struct uci_ptr ptr = { 0 };
+	int allowed;
 
 	blobmsg_parse(rpc_uci_rename_policy, __RPC_R_MAX, tb,
 	              blob_data(msg), blob_len(msg));
@@ -1102,6 +1273,21 @@ rpc_uci_rename(struct ubus_context *ctx,
 	if (uci_load(cursor, ptr.package, &p))
 		return rpc_uci_status();
 
+	if (tb[RPC_R_CONFIG] && tb[RPC_R_SECTION]) {
+		const char *username = rpc_session_get_username(tb[RPC_R_SESSION]);
+		const char *sid = tb[RPC_R_SESSION] ? blobmsg_data(tb[RPC_R_SESSION]) : NULL;
+		const char *config = blobmsg_data(tb[RPC_R_CONFIG]);
+		const char *section_name = blobmsg_data(tb[RPC_R_SECTION]);
+		const char *section_type = rpc_uci_name_to_type(p, section_name);
+		rpc_uci_load_granular(username, config, section_name, section_type, sid);
+	}
+
+	allowed = rpc_uci_check_granular_is_allowed("");
+	if (allowed < RPC_OA_SECTION) {
+		uci_unload(cursor, p);
+		return UBUS_STATUS_PERMISSION_DENIED;
+	}
+
 	if (uci_lookup_ptr(cursor, &ptr, NULL, true))
 		goto out;
 
@@ -1786,6 +1972,8 @@ int rpc_uci_api_init(struct ubus_context
 	if (!cursor)
 		return UBUS_STATUS_UNKNOWN_ERROR;
 
+	granular_ctx.match_definitions_count = -1;
+
 	rpc_session_destroy_cb(&cb);
 
 	return ubus_add_object(ctx, &obj);
Index: rpcd-2019-06-05-89bfaa42/uci_granular.c
===================================================================
--- /dev/null
+++ rpcd-2019-06-05-89bfaa42/uci_granular.c
@@ -0,0 +1,385 @@
+/*
+ * granular uci access control
+ *
+ * Copyright (C) 2019 IOPSYS
+ *
+ * Author: Jakob Olsson <jakob.olsson@iopsys.eu>
+ * Author: Matija Amidzic <matija.amidzic@sartura.hr>
+ *
+ * Permission to use, copy, modify, and/or distribute this software for any
+ * purpose with or without fee is hereby granted, provided that the above
+ * copyright notice and this permission notice appear in all copies.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
+ * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
+ * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
+ * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
+ * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
+ * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
+ * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
+ */
+
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+#include <libubox/avl.h>
+#include <libubox/avl-cmp.h>
+#include <libubox/blobmsg.h>
+#include <libubox/utils.h>
+#include <libubus.h>
+#include <uci.h>
+
+#include <rpcd/session.h>
+#include <rpcd/uci_granular.h>
+
+#include <syslog.h>
+
+static struct uci_context *_uci_context;
+
+struct uci_granular_s {
+	struct avl_node avl;
+
+	char username[GRANULAR_MAX_STRING_LENGTH];
+	struct match_definition_s match_definitions[GRANULAR_MAX_MATCH_DEFINITIONS];
+	int match_definitions_count;
+};
+
+static struct uci_granular_s *uci_granular_find_config(struct rpc_session *ses, const char *config_name, const char *username, struct uci_granular_ctx_s *granular_ctx);
+static int uci_granular_parse_match_definition(struct blob_attr *acl_definition, struct match_definition_s *match_definition);
+static bool rpc_uci_granular_match_by_option(const char *config_name, const char *section_name, const char *section_type, struct match_option_s *option);
+static void uci_granular_free_config(struct rpc_session *ses, struct uci_granular_s *config);
+static bool rpc_uci_granular_section_is_match(struct match_definition_s *match_definition, struct uci_granular_query_s *query);
+
+int rpc_uci_granular_init(struct rpc_session *ses)
+{
+	avl_init(&ses->granular_configs, avl_strcmp, false, NULL);
+	if (!_uci_context)
+		_uci_context = uci_alloc_context();
+	if (!_uci_context) {
+		return -1;
+	}
+
+	return 0;
+}
+
+int rpc_uci_granular_setup(struct rpc_session *ses, struct blob_attr *acl_top, const char *username)
+{
+	/*
+	 *	"uci_granular": {
+	 *		"<config>" : [{
+	 *			"match:" {
+	 *				"<match type>": "<match string>",
+	 *				...
+	 *			},
+	 *			"option:" [
+	 *				<option_name> or '*' for all
+	 *				...
+	 *			]
+	 *		},
+	 *		...
+	 *		]
+	 *	}
+	 */
+
+	struct blob_attr *acl_config = {0};
+	int rem1 = 0;
+	bool new = false;
+
+	blobmsg_for_each_attr(acl_config, acl_top, rem1) {
+		struct uci_granular_s *granular_config = NULL;
+		struct uci_granular_s *temp = NULL;
+		struct blob_attr *acl_match_definition = {0};
+		int rem2 = 0;
+
+		if (blobmsg_type(acl_config) != BLOBMSG_TYPE_ARRAY) {
+			continue;
+		}
+
+		avl_for_each_element(&ses->granular_configs, temp, avl) {
+			if (strcmp((char *)temp->avl.key, blobmsg_name(acl_config)) == 0) {
+				granular_config = temp;
+				break;
+			}
+		}
+
+		if (!granular_config) {
+			granular_config = calloc(1, sizeof(*granular_config));
+			if (!granular_config)
+				return -1;
+
+			granular_config->avl.key = strdup(blobmsg_name(acl_config));
+			strncpy(granular_config->username, username, GRANULAR_MAX_STRING_LENGTH);
+			if (granular_config->avl.key == NULL) {
+				free(granular_config);
+				continue;
+			}
+			new = true;
+		}
+
+		blobmsg_for_each_attr(acl_match_definition, acl_config, rem2) {
+			if (blobmsg_type(acl_match_definition) != BLOBMSG_TYPE_TABLE) {
+				continue;
+			}
+
+			uci_granular_parse_match_definition(acl_match_definition, &granular_config->match_definitions[granular_config->match_definitions_count]);
+			granular_config->match_definitions_count++;
+			if (granular_config->match_definitions_count >= GRANULAR_MAX_MATCH_DEFINITIONS) {
+				break;
+			}
+		}
+
+		if (new)
+			avl_insert(&(ses->granular_configs), &granular_config->avl);
+	}
+
+	return 0;
+}
+
+
+static int uci_granular_parse_match_definition(struct blob_attr *acl_match_definition, struct match_definition_s *match_definition)
+{
+	struct blob_attr *acl_obj = {0};
+	int rem3 = 0;
+
+	blobmsg_for_each_attr(acl_obj, acl_match_definition, rem3)
+	{
+		if (strcmp(blobmsg_name(acl_obj), "match") == 0) {
+			struct blob_attr *acl_match = {0};
+			int rem4 = 0;
+
+			if (blobmsg_type(acl_obj) != BLOBMSG_TYPE_TABLE) {
+				continue;
+			}
+			blobmsg_for_each_attr(acl_match, acl_obj, rem4)
+			{
+				if (blobmsg_type(acl_match) != BLOBMSG_TYPE_STRING) {
+					continue;
+				}
+
+				if (strcmp(blobmsg_name(acl_match), ".type") == 0) {
+					strncpy(match_definition->match_section_type, (char *) blobmsg_data(acl_match), GRANULAR_MAX_STRING_LENGTH - 1);
+					continue;
+				} else if (strcmp(blobmsg_name(acl_match), ".name") == 0) {
+					strncpy(match_definition->match_section_name, (char *) blobmsg_data(acl_match), GRANULAR_MAX_STRING_LENGTH - 1);
+					continue;
+				} else if (match_definition->match_options_count < GRANULAR_MAX_MATCH_OPTIONS) {
+					strncpy(match_definition->match_options[match_definition->match_options_count].name, blobmsg_name(acl_match), GRANULAR_MAX_STRING_LENGTH - 1);
+					strncpy(match_definition->match_options[match_definition->match_options_count].value, (char *) blobmsg_data(acl_match), GRANULAR_MAX_STRING_LENGTH - 1);
+					match_definition->match_options_count++;
+					continue;
+				}
+			}
+		} else if (strcmp(blobmsg_name(acl_obj), "option") == 0) {
+			struct blob_attr *acl_option = {0};
+			int rem4 = 0;
+			int i = match_definition->allowed_options_count;
+			char **allowed_options;
+
+			if (blobmsg_type(acl_obj) != BLOBMSG_TYPE_ARRAY) {
+				continue;
+			}
+			blobmsg_for_each_attr(acl_option, acl_obj, rem4)
+			{
+				if (blobmsg_type(acl_option) != BLOBMSG_TYPE_STRING) {
+					continue;
+				}
+				match_definition->allowed_options_count++;
+			}
+
+			if (match_definition->allowed_options_count >= GRANULAR_MAX_ALLOWED_OPTIONS) {
+				match_definition->allowed_options_count = GRANULAR_MAX_MATCH_OPTIONS;
+			}
+
+			allowed_options = realloc(match_definition->allowed_options, match_definition->allowed_options_count * sizeof(char *));
+			if (!allowed_options)
+				return -1;
+
+			match_definition->allowed_options = allowed_options;
+
+			rem4 = 0;
+			blobmsg_for_each_attr(acl_option, acl_obj, rem4)
+			{
+				if (blobmsg_type(acl_option) != BLOBMSG_TYPE_STRING) {
+					continue;
+				}
+
+				if (match_definition->allowed_options_count >= GRANULAR_MAX_ALLOWED_OPTIONS) {
+					continue;
+				}
+				match_definition->allowed_options[i++] = strndup((char *) blobmsg_data(acl_option), GRANULAR_MAX_STRING_LENGTH);
+			}
+		}
+	}
+
+	return 0;
+}
+
+void rpc_uci_granular_get_allowed(struct rpc_session *ses, struct uci_granular_query_s *query, struct uci_granular_ctx_s *granular_ctx)
+{
+	/* find relevant uci_granular_s data structure */
+	struct uci_granular_s *config = NULL;
+	int j = 0;
+
+	memset(granular_ctx->match_definitions, 0, sizeof(granular_ctx->match_definitions));
+	granular_ctx->match_definitions_count = 0;
+
+	config = uci_granular_find_config(ses, query->config_name, query->username, granular_ctx);
+	/* allow if nothing is specified for this config */
+	if (!config) {
+		granular_ctx->match_definitions_count = -1;
+		return;
+	}
+
+	for (int i = 0; i < config->match_definitions_count; i++) {
+		struct match_definition_s *match_definition = &config->match_definitions[i];
+
+		/* if match definition has section type defined, check query */
+		if (!rpc_uci_granular_section_is_match(match_definition, query))
+			continue;
+		granular_ctx->match_definitions[j++] = match_definition;
+		granular_ctx->match_definitions_count++;
+	}
+
+	return;
+}
+
+static bool rpc_uci_granular_section_is_match(struct match_definition_s *match_definition,
+					      struct uci_granular_query_s *query)
+{
+	bool is_match = true;
+	int j;
+
+	if (query->section_type || query->section_name)
+	{
+		if (strcmp(match_definition->match_section_type, "") != 0)
+		{
+			/* if query doesn't have section type defined or it isn't the same as in match definition, match is false */
+			if (query->section_type == NULL || strcmp(query->section_type, match_definition->match_section_type) != 0)
+				return false;
+		}
+
+		/* if match definition has section name defined, check query */
+		if (strcmp(match_definition->match_section_name, "") != 0)
+		{
+			/* if query doesn't have section name defined or it isn't the same as in match definition, match is false */
+			if (query->section_name == NULL || strcmp(query->section_name, match_definition->match_section_name) != 0)
+				return false;
+		}
+	}
+
+	/* match by options */
+	for (j = 0; j < match_definition->match_options_count; j++) {
+		syslog(LOG_DEBUG, "rpc_uci_granular_match_section checking %d. match option: %s:%s", j, match_definition->match_options[j].name, match_definition->match_options[j].value);
+		/* find out if the option exists and it's value is a match in the given config/section */
+		is_match = rpc_uci_granular_match_by_option(
+			query->config_name, query->section_name, query->section_type, &match_definition->match_options[j]);
+		/* this is not the match definition we are looking for */
+		if (!is_match)
+			break;
+	}
+
+	return is_match;
+}
+
+static bool
+rpc_uci_granular_match_by_option(const char *config_name, const char *section_name, const char *section_type, struct match_option_s *option)
+{
+	if (!_uci_context) {
+		return true;
+	}
+
+	if (section_name && strcmp(section_name, "") != 0) {
+		char uci_string[GRANULAR_MAX_STRING_LENGTH * 3] = {0};
+		size_t uci_string_max_length = GRANULAR_MAX_STRING_LENGTH * 3;
+		struct uci_ptr lookup = {0};
+
+		snprintf(uci_string, uci_string_max_length, "%s.%s.%s", config_name, section_name, option->name);
+
+		lookup.flags |= UCI_LOOKUP_EXTENDED;
+		int rc = uci_lookup_ptr(_uci_context, &lookup, uci_string, true);
+
+		if (rc == 0 && lookup.flags & UCI_LOOKUP_COMPLETE)
+			/* found relevant option, now need to check if the value matches */
+			if (lookup.o->type == UCI_TYPE_STRING && strcmp(option->value, lookup.o->v.string) == 0)
+				return true;
+		return false;
+	} else {
+		struct uci_package *p = NULL;
+		struct uci_section *s;
+		struct uci_element *e;
+		struct uci_ptr ptr = {.package = config_name};
+		bool access = false;
+
+		uci_load(_uci_context, ptr.package, &p);
+		if (!p) {
+			// this shouldn't ever happen
+			return false;
+		}
+
+		uci_foreach_element(&p->sections, e) {
+			const char *found_option_value;
+			s = uci_to_section(e);
+			if (section_type && strncmp(section_type, "", 2) != 0 &&
+					 strncmp(s->type, section_type, 64) != 0)
+				continue;
+
+			found_option_value = uci_lookup_option_string(_uci_context, s, option->name);
+			if (found_option_value != NULL && strcmp(option->value, found_option_value) == 0) {
+				access = true;
+				break;
+			}
+		}
+
+		uci_unload(_uci_context, p);
+		return access;
+	}
+}
+
+static struct uci_granular_s *uci_granular_find_config(struct rpc_session *ses,
+	const char *config_name, const char *username,
+	struct uci_granular_ctx_s *granular_ctx)
+{
+	struct uci_granular_s *config = NULL;
+	struct uci_granular_s *temp = NULL;
+
+	granular_ctx->state = RPC_CA_ALLOWED;
+
+	avl_for_each_element(&ses->granular_configs, temp, avl)
+	{
+		granular_ctx->state = RPC_CA_RESTRICTED;
+
+		if (strcmp((char *) temp->avl.key, config_name) == 0) {
+			config = temp;
+			break;
+		}
+	}
+	return config;
+}
+
+static void uci_granular_free_config(struct rpc_session *ses, struct uci_granular_s *config)
+{
+	int i;
+
+	avl_delete(&ses->granular_configs, &config->avl);
+	for (i = 0; i < config->match_definitions_count; i++) {
+		struct match_definition_s *match_definition = &config->match_definitions[i];
+		int j;
+
+		for (j = 0; j < match_definition->allowed_options_count; j++) {
+			free(match_definition->allowed_options[j]);
+		}
+		free(match_definition->allowed_options);
+	}
+	free((void *)config->avl.key);
+	free(config);
+}
+
+void uci_granular_exit(struct rpc_session *ses)
+{
+	struct uci_granular_s *config, *nconfig;
+
+	avl_for_each_element_safe(&ses->granular_configs, config, avl, nconfig)
+	{
+		uci_granular_free_config(ses, config);
+	}
+}
